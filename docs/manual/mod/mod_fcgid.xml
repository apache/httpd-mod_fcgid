<?xml version="1.0"?>
<!DOCTYPE modulesynopsis SYSTEM "../style/modulesynopsis.dtd">
<?xml-stylesheet type="text/xsl" href="../style/manual.en.xsl"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<modulesynopsis metafile="mod_fcgid.xml.meta">

  <name>mod_fcgid</name>
  <description>Provides for execution of FastCGI applications</description>
  <status>External</status> <!-- For now... -->
  <sourcefile>mod_fcgid.c</sourcefile>
  <identifier>fcgid_module</identifier>
  <compatibility>Apache 2.0 and higher</compatibility>
 
  <summary>
    <p>Any program assigned to the handler <code>fcgid-script</code> is processed
    using the FastCGI protocol; <module>mod_fcgid</module> starts a sufficient
    number instances of the program to handle concurrent requests, and these
    programs remain running to handle further incoming requests.  This is
    significantly faster than using the default <module>mod_cgi</module> or
    <module>mod_cgid</module> modules to launch the program upon each request.
    However, the programs invoked by <module>mod_fcgid</module> continue to
    consume resources, so the administrator must weigh the impact of invoking
    a particular program once per request against the resources required to
    leave a sufficient number of instances running continuously.</p>

    <p>The pool of fcgid-invoked programs is shared between all httpd workers.
    Configuration directives below let the administrator tune the number of
    instances of the program that will run concurrently.</p>

    <p>Specific executables are assigned this handler either by having a name 
    containing an extension defined by the 
    <directive module="mod_mime">AddHandler</directive> directive, or with an
    override using the <directive module="mod_mime">SetHandler</directive> 
    directive (e.g., for all files in a specific directory such as cgi-bin).</p>

    <p>Some changes have been made in the ASF release of mod_fcgid which
    can affect existing configurations. Especially all directives have been
    renamed. The old names still work but are now deprecated.
    Please read the <a href="#upgrade">Upgrade Notes</a> for details.</p>

    <p>For an introduction to using CGI scripts with Apache, see
    the generic tutorial on <a href="../howto/cgi.html">Dynamic Content
    With CGI</a>.</p>

  </summary>

  <section id="upgrade">
    <title>Upgrade Notes</title>
    <p>The following changes have been made in the ASF release of mod_fcgid
    and should be considered when upgrading from the original version by
    Ryan Pan (Pan Qingfeng).
    <ul>
      <li>All directives have been renamed in order to use a common prefix "FCGID".
      Underscores in directive names have been eliminated in favor of
      CamelCase. The old directive names will still work but are deprecated.
      To fix your configuration you can use the sed script tools/fixconf.sed.
      The following tables contains old and new directive names:
      <table border="1" style="zebra">
        <tr><th>Old Name</th><th>New Name</th></tr>
        <tr>
          <td><directive>BusyScanInterval</directive></td>
          <td><directive module="mod_fcgid">FCGIDBusyScanInterval</directive></td>
        </tr>
        <tr>
          <td><directive>BusyTimeout</directive></td>
          <td><directive module="mod_fcgid">FCGIDBusyTimeout</directive></td>
        </tr>
        <tr>
          <td><directive>DefaultInitEnv</directive></td>
          <td><directive module="mod_fcgid">FCGIDDefaultInitEnv</directive></td>
        </tr>
        <tr>
          <td><directive>DefaultMaxClassProcessCount</directive></td>
          <td><directive module="mod_fcgid">FCGIDDefaultMaxClassProcessCount</directive></td>
        </tr>
        <tr>
          <td><directive>DefaultMinClassProcessCount</directive></td>
          <td><directive module="mod_fcgid">FCGIDDefaultMinClassProcessCount</directive></td>
        </tr>
        <tr>
          <td><directive>ErrorScanInterval</directive></td>
          <td><directive module="mod_fcgid">FCGIDErrorScanInterval</directive></td> 
        </tr>
        <tr>
          <td><directive>FastCgiAccessChecker</directive></td>
          <td><directive module="mod_fcgid">FCGIDAccessChecker</directive></td>
        </tr>
        <tr>
          <td><directive>FastCgiAccessCheckerAuthoritative</directive></td>
          <td><directive module="mod_fcgid">FCGIDAccessCheckerAuthoritative</directive></td>
        </tr>
        <tr>
          <td><directive>FastCgiAuthenticator</directive></td>
          <td><directive module="mod_fcgid">FCGIDAuthenticator</directive></td>
        </tr>
        <tr>
          <td><directive>FastCgiAuthenticatorAuthoritative</directive></td>
          <td><directive module="mod_fcgid">FCGIDAuthenticatorAuthoritative</directive></td>
        </tr>
        <tr>
          <td><directive>FastCgiAuthorizer</directive></td>
          <td><directive module="mod_fcgid">FCGIDAuthorizer</directive></td>
        </tr>
        <tr>
          <td><directive>FastCgiAuthorizerAuthoritative</directive></td>
          <td><directive module="mod_fcgid">FCGIDAuthorizerAuthoritative</directive></td>
        </tr>
        <tr>
          <td><directive>FCGIWrapper</directive></td>
          <td><directive module="mod_fcgid">FCGIDWrapper</directive></td>
        </tr>
        <tr>
          <td><directive>IdleScanInterval</directive></td>
          <td><directive module="mod_fcgid">FCGIDIdleScanInterval</directive></td>
        </tr>
        <tr>
          <td><directive>IdleTimeout</directive></td>
          <td><directive module="mod_fcgid">FCGIDIdleTimeout</directive></td>
        </tr>
        <tr>
          <td><directive>IPCCommTimeout</directive></td>
          <td><directive module="mod_fcgid">FCGIDIPCCommTimeout</directive></td>
        </tr>
        <tr>
          <td><directive>IPCConnectTimeout</directive></td>
          <td><directive module="mod_fcgid">FCGIDIPCConnectTimeout</directive></td>
        </tr>
        <tr>
          <td><directive>MaxProcessCount</directive></td>
          <td><directive module="mod_fcgid">FCGIDMaxProcessCount</directive></td>
        </tr>
        <tr>
          <td><directive>MaxRequestInMem</directive></td>
          <td><directive module="mod_fcgid">FCGIDMaxRequestInMem</directive></td>
        </tr>
        <tr>
          <td><directive>MaxRequestLen</directive></td>
          <td><directive module="mod_fcgid">FCGIDMaxRequestLen</directive></td>
        </tr>
        <tr>
          <td><directive>MaxRequestsPerProcess</directive></td>
          <td><directive module="mod_fcgid">FCGIDMaxRequestsPerProcess</directive></td>
        </tr>
        <tr>
          <td><directive>OutputBufferSize</directive></td>
          <td><directive module="mod_fcgid">FCGIDOutputBufferSize</directive></td>
        </tr>
        <tr>
          <td><directive>PassHeader</directive></td>
          <td><directive module="mod_fcgid">FCGIDPassHeader</directive></td>
        </tr>
        <tr>
          <td><directive>PHP_Fix_Pathinfo_Enable</directive></td>
          <td><directive module="mod_fcgid">FCGIDPHPFixPathinfoEnable</directive></td>
        </tr>
        <tr>
          <td><directive>ProcessLifeTime</directive></td>
          <td><directive module="mod_fcgid">FCGIDProcessLifeTime</directive></td>
        </tr>
        <tr>
          <td><directive>SharememPath</directive></td>
          <td><directive module="mod_fcgid">FCGIDSharememPath</directive></td>
        </tr>
        <tr>
          <td><directive>SocketPath</directive></td>
          <td><directive module="mod_fcgid">FCGIDSocketPath</directive></td>
        </tr>
        <tr>
          <td><directive>SpawnScore</directive></td>
          <td><directive module="mod_fcgid">FCGIDSpawnScore</directive></td>
        </tr>
        <tr>
          <td><directive>SpawnScoreUpLimit</directive></td>
          <td><directive module="mod_fcgid">FCGIDSpawnScoreUpLimit</directive></td>
        </tr>
        <tr>
          <td><directive>TerminationScore</directive></td>
          <td><directive module="mod_fcgid">FCGIDTerminationScore</directive></td>
        </tr>
        <tr>
          <td><directive>TimeScore</directive></td>
          <td><directive module="mod_fcgid">FCGIDTimeScore</directive></td>
        </tr>
        <tr>
          <td><directive>ZombieScanInterval</directive></td>
          <td><directive module="mod_fcgid">FCGIDZombieScanInterval</directive></td>
        </tr>
      </table>
      </li>
    </ul>
    </p>

  </section>

  <section id="examples">
    <title>Examples</title>

    <note type="hint"><title>Note</title>
    <p>The examples assume that mod_fcgid and other necessary
    modules are loaded into the server already, either built-in or 
    via the <directive module="mod_so">LoadModule</directive>
    directive.</p>

    <p>Additionally, the example configurations provide full access
    to the applications using access control directives which work 
    with Apache 2.0 and 2.2.  These directives are not appropriate
    for all environments, and they do not work for development
    levels of Apache HTTP Server (Subversion trunk).</p>
    </note>

    <p>The first example is a very simple Perl FastCGI application,
    and its configuration directives.  This is typical for FastCGI
    applications which are named in the URL and which require no
    special configuration.</p>

    <example><title>Perl FastCGI application - /usr/local/apache/fcgi-bin/foo.pl</title>
    #!/usr/bin/perl<br />
    use CGI::Fast;<br />
    <br />
    while (my $q = CGI::Fast->new) {<br />
    <indent>
        print("Content-Type: text/plain\n\n");<br />
        foreach $var (sort(keys(%ENV))) {<br />
        <indent>
            $val = $ENV{$var};<br />
            $val =~ s|\n|\\n|g;<br />
            $val =~ s|"|\\"|g;<br />
            print "${var}=\"${val}\"\n";<br />
        </indent>
        }<br />
    </indent>
    }<br />
    </example>

    <example><title>Configuration directives</title>
    &lt;Directory /usr/local/apache/fcgi-bin/&gt;<br />
    <indent>
      SetHandler fcgid-script<br />
      Options +ExecCGI<br />
      <br />
      # Customize the next two directives for your requirements.<br />
      Order allow,deny<br />
      Allow from all<br />
    </indent>
    &lt;/Directory&gt;<br />
    </example>

    <p>PHP applications are usually configured using the
    <directive module="mod_fcgid">FCGIDWrapper</directive> directive
    and a corresponding wrapper script.  The wrapper script can be 
    an appropriate place to define any environment variables required
    by the application, such as <code>PHP_FCGI_MAX_REQUESTS</code>,
    <code>PHP_FCGI_CHILDREN</code>, or anything else.  (Environment
    variables can also be set with
    <directive module="mod_fcgid">FCGIDDefaultInitEnv</directive>,
    but they then apply to all applications.)</p>

    <p>Here is an example that uses a wrapper script to invoke PHP:</p>

    <example><title>PHP application - /usr/local/phpapp/phpinfo.php</title>
    &lt;?php<br />
    <indent>
      phpinfo();<br />
    </indent>
    ?&gt;<br />
    </example>

    <example><title>Configuration directives</title>
    Alias /phpapp/ /usr/local/phpapp/<br />
    &lt;Location /phpapp/&gt;<br />
    <indent>
      AddHandler fcgid-script .php<br />
      Options +ExecCGI<br />
      FCGIDWrapper /usr/local/bin/php-wrapper .php<br />
      # Uncomment the following line if cgi.fix_pathinfo<br />
      # is set to 1 in php.ini:<br />
      # FCGIDPHPFixPathinfoEnable 1<br />
      <br />
      # Customize the next two directives for your requirements.<br />
      Order allow,deny<br />
      Allow from all<br />
    </indent>
    &lt;/Location&gt;<br />
    <br />
    &lt;FilesMatch /usr/local/phpapp/phpinfo.php&gt;
    <indent>
      # Customize the next two directives for your requirements.<br />
      Order allow,deny<br />
      Allow from all<br />
    </indent>
    &lt;/FilesMatch&gt;

    </example>

    <example><title>PHP wrapper script - /usr/local/bin/php-wrapper</title>
    #!/bin/sh<br />
    # Set desired PHP_FCGI_* environment variables.<br />
    # Example:<br />
    # PHP FastCGI processes normally exit after 500 requests.<br />
    PHP_FCGI_MAX_REQUESTS=10000<br />
    export PHP_FCGI_MAX_REQUESTS<br />
    <br />
    # Replace with the path to your FastCGI-enabled PHP executable<br />
    exec /usr/local/bin/php-cgi<br />
    </example>

    <note type="warning"><title>Warning</title>
    <p>By default, PHP FastCGI processes exit after handling 500
    requests, and they may exit after this module has already
    connected to the application and sent a request.  When that
    occurs, an error will be logged and <code>500 Internal Server
    Error</code> will be returned to the client.  This PHP behavior
    can be disabled by setting <code>PHP_FCGI_MAX_REQUESTS</code> to
    0, but that can be a problem if the PHP application leaks
    resources.  Alternatively, <code>PHP_FCGI_MAX_REQUESTS</code> can
    be set to a much higher value than the default to reduce the
    frequency of this problem.</p>

    <p>The <directive module="mod_fcgid">FCGIDMaxRequestsPerProcess</directive>
    directive provides another way to address the issue:  set this
    directive to the same value as the corresponding PHP setting, and
    no additional requests will be sent to the application once it is
    ready to exit.</p>
    </note>

    <p>TODO: Should PHP child process management always be disabled
    with mod_fcgid?</p>
  </section>

  <section id="process-mgmt">
    <title>Process Management</title>

    <p>mod_fcgid has several types of controls which affect the creation
    of additional application processes:</p>

    <table border="1" style="zebra">
      <tr><th>Type of control</th><th>Directive</th></tr>
      <tr>
        <td>global limit on number of processes</td>
        <td><directive module="mod_fcgid">FCGIDMaxProcessCount</directive></td>
      </tr>
      <tr>
        <td>limit on number of processes per application</td>
        <td><directive module="mod_fcgid">FCGIDMaxClassProcessCount</directive></td>
      </tr>
      <tr>
        <td>limit on rate of spawning new application processes</td>
        <td><directive module="mod_fcgid">FCGIDSpawnScoreUpLimit</directive> and
        other score-related directives</td>
      </tr>
    </table>

    <p>mod_fcgid has several types of controls which affect the termination
    of existing application processes:</p>

    <table border="1" style="zebra">
      <tr><th>Type of control</th><th>Directive</th></tr>
      <tr>
        <td>termination after an idle period</td>
        <td><directive module="mod_fcgid">FCGIDIdleTimeout</directive></td>
      </tr>
      <tr>
        <td>termination after it handles a certain number of requests</td>
        <td><directive module="mod_fcgid">FCGIDMaxRequestsPerProcess</directive></td>
      </tr>
      <tr>
        <td>termination after a certain lifetime</td>
        <td><directive module="mod_fcgid">FCGIDProcessLifetime</directive></td>
      </tr>
    </table>

    <note type="hint"><title>Note</title>
    <p>Certain settings or other concepts that depend on the virtual host,
    such as <directive module="mod_fcgid">FCGIDDefaultInitEnv</directive>
    or process classes, distinguish between virtual hosts only if they
    have distinct server names.  (See the <directive>ServerName</directive>
    documentation for more information.) In the case of
    <directive module="mod_fcgid">FCGIDDefaultInitEnv</directive>, if two
    virtual hosts have the same server name but different environments as
    defined by 
    <directive module="mod_fcgid">FCGIDDefaultInitEnv</directive>, the 
    environment used for a particular request will be that defined for the
    virtual host of the request that caused the FastCGI process to be 
    started.</p>
    </note>

  </section>

  <!-- References to other documents or directives -->
  <seealso><a href="../howto/cgi.html">Dynamic Content With CGI</a></seealso>
  <seealso><module>mod_cgi</module></seealso>
  <seealso><module>mod_cgid</module></seealso>
 
  <directivesynopsis>
    <name>FCGIDAccessChecker</name>
    <description>full path to FastCGI access checker</description>
    <syntax>FCGIDAccessChecker <em>command</em></syntax>
    <default><em>none</em></default>
    <contextlist><context>directory</context> <context>.htaccess</context></contextlist>
    <override>FileInfo</override>
    <usage>
      <p>Access checking or, more formally, access control, is a procedure 
      which verifies that the client is allowed to access a resource, using 
      some mechanism other than authentication and authorization.</p>

      <p>Key environment variables passed to the application for access
      checking are:</p>

      <dl>
        <dt><code>FCGI_APACHE_ROLE</code></dt>
        <dd>set to <code>ACCESS_CHECKER</code>; by checking the current role,
        the same FastCGI application can handle multiple stages of request
        processing</dd>
      </dl>

      <p>The application must output a <code>Status</code> line to indicate
      the result of authentication.</p>

      <note type="warning"><title>Warning</title>
      <p>Currently, only one FastCGI application of any type (AAA or handler)
      can be used for a particular request URI.  Otherwise, the wrong FastCGI
      application may be invoked for one or more phases of request processing.</p>
      </note>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDAccessCheckerAuthoritative</name>
    <description>Set to 'off' to allow access control to be passed along to lower modules upon failure</description>
    <syntax>FCGIDAccessCheckerAuthoritative <em>On|Off</em></syntax>
    <default>FCGIDAccessCheckerAuthoritative On</default>
    <contextlist><context>directory</context> <context>.htaccess</context></contextlist>
    <override>FileInfo</override>
    <usage>
      <p>This directive controls whether or not other access checkers
      are allowed to run when this module has an access checker configured 
      and it fails a request.  If this directive is <code>On</code> (default)
      and a FastCGI access checker returns a failure status, a failure is
      returned to the client without giving other access checkers a chance to
      allow access.  If this directive is <code>Off</code>, other access
      checkers will be called.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDAuthenticator</name>
    <description>full path to FastCGI authenticator</description>
    <syntax>FCGIDAuthenticator <em>command</em></syntax>
    <default><em>none</em></default>
    <contextlist><context>directory</context> <context>.htaccess</context></contextlist>
    <override>FileInfo</override>
    <usage>
      <p>Authentication is the procedure which verifies that the user is
      who they claim they are.  This directive specifies the full path to 
      a FastCGI application which will handle authentication for a particular
      context, such as a directory.</p>

      <p>Key environment variables passed to the application on authentication
      are:</p>

      <dl>
        <dt><code>REMOTE_USER</code></dt>
        <dd>set to the user id of the client</dd>

        <dt><code>REMOTE_PASSWD</code></dt>
        <dd>set to the plain text password provided by the client</dd>

        <dt><code>FCGI_APACHE_ROLE</code></dt>
        <dd>set to <code>AUTHENTICATOR</code>; by checking the current role,
        the same FastCGI application can handle multiple stages of request
        processing</dd>
      </dl>

      <p>The application must output a <code>Status</code> line to indicate
      the result of authentication.</p>

      <note type="warning"><title>Warning</title>
      <p>Currently, only one FastCGI application of any type (AAA or handler)
      can be used for a particular request URI.  Otherwise, the wrong FastCGI
      application may be invoked for one or more phases of request processing.</p>
      </note>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDAuthenticatorAuthoritative</name>
    <description>Set to 'off' to allow authentication to be passed along to lower modules upon failure</description>
    <syntax>FCGIDAuthenticatorAuthoritative <em>On|Off</em></syntax>
    <default>FCGIDAuthenticatorAuthoritative On</default>
    <contextlist><context>directory</context> <context>.htaccess</context></contextlist>
    <override>FileInfo</override>
    <usage>
      <p>This directive controls whether or not other authenticators
      are allowed to run when this module has an authenticator configured 
      and it fails a request.  If this directive is <code>On</code> (default)
      and a FastCGI authenticator returns a failure status, a failure is
      returned to the client without giving other authenticators a chance to
      validate the client identity.  If this directive is <code>Off</code>, 
      other authenticators will be called.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDAuthorizer</name>
    <description>full path to FastCGI authorizer</description>
    <syntax>FCGIDAuthorizer <em>command</em></syntax>
    <default><em>none</em></default>
    <contextlist><context>directory</context> <context>.htaccess</context></contextlist>
    <override>FileInfo</override>
    <usage>
      <p>Authorization is the procedure which verifies that the user is
      allowed to access a particular resource.  This directive specifies
      the full path to a FastCGI application which will handle authorization
      for a particular context, such as a directory.</p>

      <p>Key environment variables passed to the application on authorization
      are:</p>

      <dl>
        <dt><code>REMOTE_USER</code></dt>
        <dd>set to the user id of the client, which has already been 
        authenticated</dd>

        <dt><code>FCGI_APACHE_ROLE</code></dt>
        <dd>set to <code>AUTHORIZER</code>; by checking the current role, the 
        same FastCGI application can handle multiple stages of request
        processing</dd>
      </dl>

      <p>The application must output a <code>Status</code> line to indicate
      the result of authorization.</p>

      <note type="warning"><title>Warning</title>
      <p>Currently, only one FastCGI application of any type (AAA or handler)
      can be used for a particular request URI.  Otherwise, the wrong FastCGI
      application may be invoked for one or more phases of request processing.</p>
      </note>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDAuthorizerAuthoritative</name>
    <description>Set to 'off' to allow authorization to be passed along to lower modules upon failure</description>
    <syntax>FCGIDAuthorizerAuthoritative <em>On|Off</em></syntax>
    <default>FCGIDAuthorizerAuthoritative On</default>
    <contextlist><context>directory</context> <context>.htaccess</context></contextlist>
    <override>FileInfo</override>
    <usage>
      <p>This directive controls whether or not other authorizers
      are allowed to run when this module has an authorizer configured 
      and it fails a request.  If this directive is <code>On</code> (default)
      and a FastCGI authorizer returns a failure status, a failure is
      returned to the client without giving other authorizer a chance to
      access the resource.  If this directive is <code>Off</code>, other
      authorizers will be called.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDBusyScanInterval</name>
    <description>scan interval for busy timeout process</description>
    <syntax>FCGIDBusyScanInterval <em>seconds</em></syntax>
    <default>FCGIDBusyScanInterval 120</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>The module performs the 
      <directive module="mod_fcgid">FCGIDBusyTimeout</directive> check at this 
      interval.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDBusyTimeout</name>
    <description>a FastCGI application will be killed after handling a request for FCGIDBusyTimeout</description>
    <syntax>FCGIDBusyTimeout <em>seconds</em></syntax>
    <default>FCGIDBusyTimeout 300</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>This is the maximum time limit for request handling.  If a FastCGI
      request does not complete within FCGIDBusyTimeout seconds, it will be
      subject to termination.  Because the check is performed at the
      interval defined by <directive module="mod_fcgid">FCGIDBusyScanInterval</directive>,
      request handling may be allowed to proceed for a longer period of time.</p>

      <p>The purpose of this directive is to terminate hung applications.
      The default timeout may need to be increased for applications that
      can take longer to process the request.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDDefaultInitEnv</name>
    <description>an environment variable name and optional value to pass to FastCGI.</description>
    <syntax>FCGIDDefaultInitEnv <em>name</em> [ <em>value</em> ]</syntax>
    <default><em>none</em></default>
    <contextlist><context>server config</context> <context>virtual host</context></contextlist>
    <usage>
      <p>Use <directive>FCGIDDefaultInitEnv</directive> to define environment 
      variables to pass to the FastCGI application.  This directive can 
      be used multiple times.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDDefaultMaxClassProcessCount</name>
    <description>Max process count of one class of FastCGI application</description>
    <syntax>FCGIDDefaultMaxClassProcessCount <em>value</em></syntax>
    <default>FCGIDDefaultMaxClassProcessCount 100</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>A process class is the set of processes which were started by the same
      command, and share certain other characteristics such as virtual host and
      identity.</p>

      <p>This directive sets the maximum number of processes in a class that
      can be started.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDDefaultMinClassProcessCount</name>
    <description>Min process count of one class of FastCGI application</description>
    <syntax>FCGIDDefaultMinClassProcessCount <em>value</em></syntax>
    <default>FCGIDDefaultMinClassProcessCount 3</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>A process class is the set of processes which were started by the same
      command, and share certain other characteristics such as virtual host and
      identity.</p>

      <p>This directive sets the minimum number of processes in a class that
      will be retained after finishing requests.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDErrorScanInterval</name>
    <description>scan interval for exited process</description>
    <syntax>FCGIDErrorScanInterval <em>seconds</em></syntax>
    <default>FCGIDErrorScanInterval 3</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>This is the interval at which the module will handle
      pending process termination.  Termination is pending for
      any processes which have exceeded 
      <directive module="mod_fcgid">FCGIDIdleScanInterval</directive> or
      <directive module="mod_fcgid">FCGIDProcessLifeTime</directive>.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDIdleScanInterval</name>
    <description>scan interval for idle timeout process</description>
    <syntax>FCGIDIdleScanInterval <em>seconds</em></syntax>
    <default>FCGIDIdleScanInterval 120</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>This is the interval at which the module will search for
      processes which have exceeded 
      <directive module="mod_fcgid">FCGIDIdleScanInterval</directive> or
      <directive module="mod_fcgid">FCGIDProcessLifeTime</directive>.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDIdleTimeout</name>
    <description>An idle FastCGI application will be killed after FCGIDIdleTimeout</description>
    <syntax>FCGIDIdleTimeout <em>seconds</em></syntax>
    <default>FCGIDIdleTimeout 300</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>Application processes which have not handled a request
      for this period of time will be terminated.  A value of <code>0</code>
      disables the check.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDIPCCommTimeout</name>
    <description>Communication timeout to FastCGI server</description>
    <syntax>FCGIDIPCCommTimeout <em>seconds</em></syntax>
    <default>FCGIDIPCCommTimeout 40</default>
    <contextlist><context>server config</context> <context>virtual host</context></contextlist>
    <usage>
      <p>This is the maximum period of time the module will wait
      while trying to read from or write to a FastCGI application.</p>

      <note type="warning"><title>Warning</title>
      <p>The FastCGI application must begin generating the response within
      this period of time.  Increase this directive as necessary to handle
      applications which take a relatively long period of time to respond.</p>
      </note>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDIPCConnectTimeout</name>
    <description>Connect timeout to FastCGI server</description>
    <syntax>FCGIDIPCConnectTimeout <em>seconds</em></syntax>
    <default>FCGIDIPCConnectTimeout 3</default>
    <contextlist><context>server config</context> <context>virtual host</context></contextlist>
    <usage>
      <p>This is the maximum period of time the module will wait
      while trying to connect to a FastCGI application on Windows.
      (This directive is not respected on Unix, where AF_UNIX defaults
      will apply.)</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDMaxProcessCount</name>
    <description>maximum number of FastCGI application processes</description>
    <syntax>FCGIDMaxProcessCount <em>value</em></syntax>
    <default>FCGIDMaxProcessCount 1000</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>This directive sets the maximum number of FastCGI application
      processes which can be active at one time.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDMaxRequestInMem</name>
    <description>maximum size of a request which will be held in memory</description>
    <syntax>FCGIDMaxRequestInMem <em>bytes</em></syntax>
    <default>FCGIDMaxRequestInMem 65536</default>
    <contextlist><context>server config</context> <context>virtual host</context></contextlist>
    <usage>
      <p>This module reads the entire request body from the client
      before sending it to the application.  Normally the request body
      will be stored in memory.  Once the amount of request body read
      from the client exceeds <directive>FCGIDMaxRequestInMem</directive>
      bytes, the remainder of the request body will be stored in a 
      temporary file.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDMaxRequestLen</name>
    <description>maximum HTTP request length</description>
    <syntax>FCGIDMaxRequestLen <em>bytes</em></syntax>
    <default>FCGIDMaxRequestLen 1073741824</default>
    <contextlist><context>server config</context> <context>virtual host</context></contextlist>
    <usage>
      <p>If the size of the request body exceeds this amount, the
      request will fail with <code>500 Server Error</code>.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDMaxRequestsPerProcess</name>
    <description>Max requests handled by each FastCGI application</description>
    <syntax>FCGIDMaxRequestsPerProcess <em>value</em></syntax>
    <default>FCGIDMaxRequestsPerProcess 0</default>
    <contextlist><context>server config</context> <context>virtual host</context></contextlist>
    <usage>
      <p>FastCGI application processes will be terminated after handling
      the specified number of requests.  A value of <code>0</code>
      disables the check.</p>
      <note type="hint"><title>Note</title>
      <p>A value of <code>-1</code> is currently accepted for ease of
      migration for existing configurations.  It is treated the same as
      <code>0</code>.</p>
      </note>
      <p>Certain applications, notably PHP as FastCGI, have their own
      facility for terminating after handling a certain number of
      requests.  This directive can be used to avoid sending
      additional requests to the application after it has handled its
      limit.</p>
      <note type="warning"><title>Warning</title>
      <p>If this is set such that frequent process creation will be
      required, you will likely need to adjust 
      <directive module="mod_fcgid">FCGIDSpawnScoreUpLimit</directive>
      or other score-related directives to allow more frequent process
      creation.</p>
      </note>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDOutputBufferSize</name>
    <description>CGI output buffer size</description>
    <syntax>FCGIDOutputBufferSize <em>bytes</em></syntax>
    <default>FCGIDOutputBufferSize 65536</default>
    <contextlist><context>server config</context> <context>virtual host</context></contextlist>
    <usage>
      <p>This is the maximum amount of response data the module will read
      from the FastCGI application before flushing the data to the client.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDPassHeader</name>
    <description>Header name which will be passed to FastCGI as environment variable.</description>
    <syntax>FCGIDPassHeader <em>name</em></syntax>
    <default><em>none</em></default>
    <contextlist><context>server config</context> <context>virtual host</context></contextlist>
    <usage>
      <p>This directive specifies the name of a request header which
      will be passed to the FastCGI application as an environment
      variable.  The environment variable name will match the name 
      specified on this directive, with hyphens converted to 
      underscores, and no case conversion performed.</p>

      <note type="hint"><title>Note</title>
      <p>Most request headers are already available to the application
      as environment variables, and generally are prefixed with 
      <code>HTTP_</code>.  (Notable exceptions are <code>Content-type</code>
      and <code>Content-length</code>, which do not have the
      <code>HTTP_</code> prefix.)  Thus, this directive is only required
      for request headers that are purposefully omitted, such as
      <code>Authorization</code> and <code>Proxy-Authorization</code>.
      Only pass these request headers if absolutely required.</p>
      </note>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDPHPFixPathinfoEnable</name>
    <description>Mirror the PHP <code>cgi.fix_pathinfo</code>
    setting</description>
    <syntax>FCGIDPHPFixPathinfoEnable 1</syntax>
    <default>FCGIDPHPFixPathinfoEnable 0</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>This directive enables special <code>SCRIPT_NAME</code> 
      processing which allows PHP to provide additional path information.
      The setting of <directive>FCGIDPHPFixPathinfoEnable</directive>
      should mirror the <code>cgi.fix_pathinfo</code> setting in 
      <code>php.ini</code>.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDProcessLifeTime</name>
    <description>maximum FastCGI application process lifetime</description>
    <syntax>FCGIDProcessLifeTime <em>seconds</em></syntax>
    <default>FCGIDProcessLifeTime 3600</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>Idle application processes which have existed for greater
      than this time will be terminated.  A value of <code>0</code>
      disables the check.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDSharememPath</name>
    <description>shared memory file path</description>
    <syntax>FCGIDSharememPath <em>pathname</em></syntax>
    <default>FCGIDSharememPath logs/fcgid_shm</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>This module uses shared memory on Unix to maintain state which
      is shared between httpd processes.  This directive specifies the
      name of the shared memory file.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDSocketPath</name>
    <description>directory for AF_UNIX sockets (Unix) or pipes (Windows)</description>
    <syntax>FCGIDSocketPath <em>pathname</em></syntax>
    <default>FCGIDSocketPath logs/fcgidsock</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>This module uses AF_UNIX sockets or named pipes, depending on the
      platform, to communicate with FastCGI applications.  This directive
      specifies the directory where those sockets or named pipes will be
      created.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDSpawnScore</name>
    <description>Each spawn adds this value to the process activity score.</description>
    <syntax>FCGIDSpawnScore <em>value</em></syntax>
    <default>FCGIDSpawnScore 1</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>Lower values of this directive increase the allowed spawn rate.</p>

      <p>Refer to the <directive module="mod_fcgid">FCGIDSpawnScoreUpLimit</directive>
      directive for more information.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDSpawnScoreUpLimit</name>
    <description>Maximum value of the process activity score which allows
    a spawn to occur</description>
    <syntax>FCGIDSpawnScoreUpLimit <em>value</em></syntax>
    <default>FCGIDSpawnScoreUpLimit 10</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>A process activity score is maintained for each FastCGI application;
      the score is used to control the rate of spawning in order to avoid 
      placing too much load on the system, particularly for applications that
      are repeatedly exiting abnormally.</p>

      <p>The value of <directive module="mod_fcgid">FCGIDSpawnScore</directive>
      is added to the score for every spawned application process.  The value of 
      <directive module="mod_fcgid">FCGIDTerminationScore</directive> is added
      to the score for every terminated application process.  The value of
      <directive module="mod_fcgid">FCGIDTimeScore</directive> is subtracted
      from the score every second.</p>

      <p>When the current score is higher than the value of
      <directive>FCGIDSpawnScoreUpLimit</directive>, no additional application
      processes will be spawned; subsequent requests must wait until an existing 
      process is free or until the score decreases below the limit.</p>

      <p>If the limit is reached under normal load, it may not be sufficient to
      simply increase the limit, as that would only delay the amount of time 
      before the limit is reached again.  Decrease the value of 
      <directive module="mod_fcgid">FCGIDSpawnScore</directive> and/or 
      <directive module="mod_fcgid">FCGIDTerminationScore</directive>, or
      increase the value of <directive module="mod_fcgid">FCGIDTimeScore</directive>,
      to allow a higher rate of spawning.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDTerminationScore</name>
    <description>Each terminated process adds this value to the process activity
    score.</description>
    <syntax>FCGIDTerminationScore <em>value</em></syntax>
    <default>FCGIDTerminationScore 2</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>Lower values of this directive increase the allowed spawn rate.  Negative
      values can be useful in some circumstances, such as allowing process 
      replacement without increasing the score.</p>

      <p>Refer to the <directive module="mod_fcgid">FCGIDSpawnScoreUpLimit</directive>
      directive for more information.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDTimeScore</name>
    <description>Amount subtracted from process activity score each 
    second</description>
    <syntax>FCGIDTimeScore <em>value</em></syntax>
    <default>FCGIDTimeScore 1</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>Higher values of this directive increase the allowed spawn rate.</p>

      <p>Refer to the <directive module="mod_fcgid">FCGIDSpawnScoreUpLimit</directive>
      directive for more information.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDWrapper</name>
    <description>The CGI wrapper setting</description>
    <syntax>FCGIDWrapper <em>command</em> [ <em>suffix</em> ] [ virtual ]</syntax>
    <default><em>none</em></default>
    <contextlist>
      <context>server config</context> <context>virtual host</context>
      <context>directory</context> <context>.htaccess</context>
    </contextlist>
    <override>FileInfo</override>
    <usage>
      <p>The given command is used to spawn FCGI server processes. If this directive
      is not used, the file pointed to by the request URL will be used instead.
      Options for the command can be included using quotation marks surrounding
      the command and options.</p>
      <p>The optional <code>suffix</code> argument restricts the use of this FCGI
      server to all URLs with the given exact path suffix. A suffix needs to start
      with '<code>.</code>'.</p>
      <p>The <code>virtual</code> flag signals that there will be no check
      whether the request URL actually points to an existing file. The only
      file which needs to exist is the wrapper itself.</p>
      <p>The directive can be used multiple times. A wrapper defined without a suffix
      is used as a default in case no suffix matches.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDZombieScanInterval</name>
    <description>scan interval for zombie process</description>
    <syntax>FCGIDZombieScanInterval <em>seconds</em></syntax>
    <default>FCGIDZombieScanInterval 3</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>The module checks for exited FastCGI applications at this interval.
      During this period of time, the application may exist in the process
      table as a zombie (on Unix).</p>
    </usage>
  </directivesynopsis>

</modulesynopsis>
