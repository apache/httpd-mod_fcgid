<?xml version="1.0"?>
<!DOCTYPE modulesynopsis SYSTEM "../style/modulesynopsis.dtd">
<?xml-stylesheet type="text/xsl" href="../style/manual.en.xsl"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<modulesynopsis metafile="mod_fcgid.xml.meta">

  <name>mod_fcgid</name>
  <description>Provides for execution of FastCGI applications</description>
  <status>External</status> <!-- For now... -->
  <sourcefile>mod_fcgid.c</sourcefile>
  <identifier>fcgid_module</identifier>
  <compatibility>Apache 2.0 and higher</compatibility>
 
  <summary>
    <p>Any program assigned to the handler <code>fcgid-script</code> is processed
    using the FastCGI protocol; <module>mod_fcgid</module> starts a sufficient
    number instances of the program to handle concurrent requests, and these
    programs remain running to handle further incoming requests.  This is
    significantly faster than using the default <module>mod_cgi</module> or
    <module>mod_cgid</module> modules to launch the program upon each request.
    However, the programs invoked by <module>mod_fcgid</module> continue to
    consume resources, so the administrator must weigh the impact of invoking
    a particular program once per request against the resources required to
    leave a sufficient number of instances running continuously.</p>

    <p>The pool of fcgid-invoked programs is shared between all httpd workers.
    Configuration directives below let the administrator tune the number of
    instances of the program that will run concurrently.</p>

    <p>Specific executables are assigned this handler either by having a name 
    containing an extension defined by the 
    <directive module="mod_mime">AddHandler</directive> directive, or with an
    override using the <directive module="mod_mime">SetHandler</directive> 
    directive (e.g., for all files in a specific directory such as cgi-bin).</p>

    <p>For an introduction to using CGI scripts with Apache, see
    the generic tutorial on <a href="../howto/cgi.html">Dynamic Content
    With CGI</a>.</p>

  </summary>

  <section id="examples">
    <title>Examples</title>

    <note type="hint"><title>Note</title>
    <p>The examples assume that mod_fcgid and other necessary
    modules are loaded into the server already, either built-in or 
    via the <directive module="mod_so">LoadModule</directive>
    directive.</p>

    <p>Additionally, the example configurations provide full access
    to the applications using access control directives which work 
    with Apache 2.0 and 2.2.  These directives are not appropriate
    for all environments, and they do not work for development
    levels of Apache HTTP Server (Subversion trunk).</p>
    </note>

    <p>The first example is a very simple Perl FastCGI application,
    and its configuration directives.  This is typical for FastCGI
    applications which are named in the URL and which require no
    special configuration.</p>

    <example><title>Perl FastCGI application - /usr/local/apache/fcgi-bin/foo.pl</title>
    #!/usr/bin/perl<br />
    use CGI::Fast;<br />
    <br />
    while (my $q = CGI::Fast->new) {<br />
    <indent>
        print("Content-Type: text/plain\n\n");<br />
        foreach $var (sort(keys(%ENV))) {<br />
        <indent>
            $val = $ENV{$var};<br />
            $val =~ s|\n|\\n|g;<br />
            $val =~ s|"|\\"|g;<br />
            print "${var}=\"${val}\"\n";<br />
        </indent>
        }<br />
    </indent>
    }<br />
    </example>

    <example><title>Configuration directives</title>
    &lt;Directory /usr/local/apache/fcgi-bin/&gt;<br />
    <indent>
      SetHandler fcgid-script<br />
      Options +ExecCGI<br />
      <br />
      # Customize the next two directives for your requirements.<br />
      Order allow,deny<br />
      Allow from all<br />
    </indent>
    &lt;/Directory&gt;<br />
    </example>

    <p>PHP applications are usually configured using the
    <directive module="mod_fcgid">FCGIDWrapper</directive> directive
    and a corresponding wrapper script, as in the following
    example:</p>

    <example><title>PHP application - /usr/local/phpapp/phpinfo.php</title>
    &lt;?php<br />
    <indent>
      phpinfo();<br />
    </indent>
    ?&gt;<br />
    </example>

    <example><title>Configuration directives</title>
    Alias /phpapp/ /usr/local/phpapp/<br />
    &lt;Location /phpapp/&gt;<br />
    <indent>
      AddHandler fcgid-script .php<br />
      Options +ExecCGI<br />
      FCGIDWrapper /usr/local/bin/php-wrapper .php<br />
      # Uncomment the following line if cgi.fix_pathinfo<br />
      # is set to 1 in php.ini:<br />
      # FCGIDPHPFixPathinfoEnable 1<br />
      <br />
      # Customize the next two directives for your requirements.<br />
      Order allow,deny<br />
      Allow from all<br />
    </indent>
    &lt;/Location&gt;<br />
    <br />
    &lt;FilesMatch /usr/local/phpapp/phpinfo.php&gt;
    <indent>
      # Customize the next two directives for your requirements.<br />
      Order allow,deny<br />
      Allow from all<br />
    </indent>
    &lt;/FilesMatch&gt;

    </example>

    <example><title>PHP wrapper script - /usr/local/bin/php-wrapper</title>
    #!/bin/sh<br />
    # Set desired PHP_FCGI_* environment variables.<br />
    # Example:<br />
    PHP_FCGI_MAX_REQUESTS=1000<br />
    export PHP_FCGI_MAX_REQUESTS<br />
    <br />
    # Replace with the path to your FastCGI-enabled PHP executable<br />
    exec /usr/local/bin/php-cgi<br />
    </example>

  </section>

  <!-- References to other documents or directives -->
  <seealso><a href="../howto/cgi.html">Dynamic Content With CGI</a></seealso>
  <seealso><module>mod_cgi</module></seealso>
  <seealso><module>mod_cgid</module></seealso>
 
  <directivesynopsis>
    <name>FCGIDAccessChecker</name>
    <description>full path to FastCGI access checker</description>
    <syntax>FCGIDAccessChecker <em>command</em></syntax>
    <default><em>none</em></default>
    <contextlist><context>directory</context> <context>.htaccess</context></contextlist>
    <override>FileInfo</override>
    <usage>
      <p>Access checking or, more formally, access control, is a procedure 
      which verifies that the client is allowed to access a resource, using 
      some mechanism other than authentication and authorization.</p>

      <p>Key environment variables passed to the application for access
      checking are:</p>

      <dl>
        <dt><code>FCGI_APACHE_ROLE</code></dt>
        <dd>set to <code>ACCESS_CHECKER</code>; by checking the current role,
        the same FastCGI application can handle multiple stages of request
        processing</dd>
      </dl>

      <p>The application must output a <code>Status</code> line to indicate
      the result of authentication.</p>

      <note type="warning"><title>Warning</title>
      <p>Currently, only one FastCGI application of any type (AAA or handler)
      can be used for a particular request URI.  Otherwise, the wrong FastCGI
      application may be invoked for one or more phases of request processing.</p>
      </note>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDAccessCheckerAuthoritative</name>
    <description>Set to 'off' to allow access control to be passed along to lower modules upon failure</description>
    <syntax>FCGIDAccessCheckerAuthoritative <em>On|Off</em></syntax>
    <default>FCGIDAccessCheckerAuthoritative On</default>
    <contextlist><context>directory</context> <context>.htaccess</context></contextlist>
    <override>FileInfo</override>
    <usage>
      <p>This directive controls whether or not other access checkers
      are allowed to run when this module has an access checker configured 
      and it fails a request.  If this directive is <code>On</code> (default)
      and a FastCGI access checker returns a failure status, a failure is
      returned to the client without giving other access checkers a chance to
      allow access.  If this directive is <code>Off</code>, other access
      checkers will be called.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDAuthenticator</name>
    <description>full path to FastCGI authenticator</description>
    <syntax>FCGIDAuthenticator <em>command</em></syntax>
    <default><em>none</em></default>
    <contextlist><context>directory</context> <context>.htaccess</context></contextlist>
    <override>FileInfo</override>
    <usage>
      <p>Authentication is the procedure which verifies that the user is
      who they claim they are.  This directive specifies the full path to 
      a FastCGI application which will handle authentication for a particular
      context, such as a directory.</p>

      <p>Key environment variables passed to the application on authentication
      are:</p>

      <dl>
        <dt><code>REMOTE_USER</code></dt>
        <dd>set to the user id of the client</dd>

        <dt><code>REMOTE_PASSWD</code></dt>
        <dd>set to the plain text password provided by the client</dd>

        <dt><code>FCGI_APACHE_ROLE</code></dt>
        <dd>set to <code>AUTHENTICATOR</code>; by checking the current role,
        the same FastCGI application can handle multiple stages of request
        processing</dd>
      </dl>

      <p>The application must output a <code>Status</code> line to indicate
      the result of authentication.</p>

      <note type="warning"><title>Warning</title>
      <p>Currently, only one FastCGI application of any type (AAA or handler)
      can be used for a particular request URI.  Otherwise, the wrong FastCGI
      application may be invoked for one or more phases of request processing.</p>
      </note>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDAuthenticatorAuthoritative</name>
    <description>Set to 'off' to allow authentication to be passed along to lower modules upon failure</description>
    <syntax>FCGIDAuthenticatorAuthoritative <em>On|Off</em></syntax>
    <default>FCGIDAuthenticatorAuthoritative On</default>
    <contextlist><context>directory</context> <context>.htaccess</context></contextlist>
    <override>FileInfo</override>
    <usage>
      <p>This directive controls whether or not other authenticators
      are allowed to run when this module has an authenticator configured 
      and it fails a request.  If this directive is <code>On</code> (default)
      and a FastCGI authenticator returns a failure status, a failure is
      returned to the client without giving other authenticators a chance to
      validate the client identity.  If this directive is <code>Off</code>, 
      other authenticators will be called.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDAuthorizer</name>
    <description>full path to FastCGI authorizer</description>
    <syntax>FCGIDAuthorizer <em>command</em></syntax>
    <default><em>none</em></default>
    <contextlist><context>directory</context> <context>.htaccess</context></contextlist>
    <override>FileInfo</override>
    <usage>
      <p>Authorization is the procedure which verifies that the user is
      allowed to access a particular resource.  This directive specifies
      the full path to a FastCGI application which will handle authorization
      for a particular context, such as a directory.</p>

      <p>Key environment variables passed to the application on authorization
      are:</p>

      <dl>
        <dt><code>REMOTE_USER</code></dt>
        <dd>set to the user id of the client, which has already been 
        authenticated</dd>

        <dt><code>FCGI_APACHE_ROLE</code></dt>
        <dd>set to <code>AUTHORIZER</code>; by checking the current role, the 
        same FastCGI application can handle multiple stages of request
        processing</dd>
      </dl>

      <p>The application must output a <code>Status</code> line to indicate
      the result of authorization.</p>

      <note type="warning"><title>Warning</title>
      <p>Currently, only one FastCGI application of any type (AAA or handler)
      can be used for a particular request URI.  Otherwise, the wrong FastCGI
      application may be invoked for one or more phases of request processing.</p>
      </note>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDAuthorizerAuthoritative</name>
    <description>Set to 'off' to allow authorization to be passed along to lower modules upon failure</description>
    <syntax>FCGIDAuthorizerAuthoritative <em>On|Off</em></syntax>
    <default>FCGIDAuthorizerAuthoritative On</default>
    <contextlist><context>directory</context> <context>.htaccess</context></contextlist>
    <override>FileInfo</override>
    <usage>
      <p>This directive controls whether or not other authorizers
      are allowed to run when this module has an authorizer configured 
      and it fails a request.  If this directive is <code>On</code> (default)
      and a FastCGI authorizer returns a failure status, a failure is
      returned to the client without giving other authorizer a chance to
      access the resource.  If this directive is <code>Off</code>, other
      authorizers will be called.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDBusyScanInterval</name>
    <description>scan interval for busy timeout process</description>
    <syntax>FCGIDBusyScanInterval <em>seconds</em></syntax>
    <default>FCGIDBusyScanInterval 120</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>The module performs the 
      <directive module="mod_fcgid">FCGIDBusyTimeout</directive> check at this 
      interval.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDBusyTimeout</name>
    <description>a FastCGI application will be killed after handling a request for FCGIDBusyTimeout</description>
    <syntax>FCGIDBusyTimeout <em>seconds</em></syntax>
    <default>FCGIDBusyTimeout 300</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>This is the maximum time limit for request handling.  If a FastCGI
      request does not complete within FCGIDBusyTimeout seconds, it will be
      subject to termination.  Because the check is performed at the
      interval defined by <directive module="mod_fcgid">FCGIDBusyScanInterval</directive>,
      request handling may be allowed to proceed for a longer period of time.</p>

      <p>The purpose of this directive is to terminate hung applications.
      The default timeout may need to be increased for applications that
      can take longer to process the request.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDDefaultInitEnv</name>
    <description>an environment variable name and optional value to pass to FastCGI.</description>
    <syntax>FCGIDDefaultInitEnv <em>name</em> [ <em>value</em> ]</syntax>
    <default><em>none</em></default>
    <contextlist><context>server config</context> <context>virtual host</context></contextlist>
    <usage>
      <p>Use <directive>FCGIDDefaultInitEnv</directive> to define environment 
      variables to pass to the FastCGI application.  This directive can 
      be used multiple times.</p>

      <note type="hint"><title>Note</title>
      <p>These settings are associated with the FastCGI process and are 
      not reset on every request based on the current virtual host
      settings.  The FastCGI process will run with the environment
      settings of the virtual host of the request that caused the FastCGI
      process to be started; these are not necessarily the same as those
      of the virtual hosts of subsequent requests.</p>
      </note>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDDefaultMaxClassProcessCount</name>
    <description>Max process count of one class of FastCGI application</description>
    <syntax>FCGIDDefaultMaxClassProcessCount <em>value</em></syntax>
    <default>FCGIDDefaultMaxClassProcessCount 100</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>A process class is the set of processes which were started by the same
      command, and share certain other characteristics such as virtual host and
      identity.</p>

      <p>This directive sets the maximum number of processes in a class that
      can be started.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDDefaultMinClassProcessCount</name>
    <description>Min process count of one class of FastCGI application</description>
    <syntax>FCGIDDefaultMinClassProcessCount <em>value</em></syntax>
    <default>FCGIDDefaultMinClassProcessCount 3</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>A process class is the set of processes which were started by the same
      command, and share certain other characteristics such as virtual host and
      identity.</p>

      <p>This directive sets the minimum number of processes in a class that
      will be retained after finishing requests.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDErrorScanInterval</name>
    <description>scan interval for exited process</description>
    <syntax>FCGIDErrorScanInterval <em>seconds</em></syntax>
    <default>FCGIDErrorScanInterval 3</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>This is the interval at which the module will handle
      pending process termination.  Termination is pending for
      any processes which have exceeded 
      <directive module="mod_fcgid">FCGIDIdleScanInterval</directive> or
      <directive module="mod_fcgid">FCGIDProcessLifeTime</directive>.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDIdleScanInterval</name>
    <description>scan interval for idle timeout process</description>
    <syntax>FCGIDIdleScanInterval <em>seconds</em></syntax>
    <default>FCGIDIdleScanInterval 120</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>This is the interval at which the module will search for
      processes which have exceeded 
      <directive module="mod_fcgid">FCGIDIdleScanInterval</directive> or
      <directive module="mod_fcgid">FCGIDProcessLifeTime</directive>.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDIdleTimeout</name>
    <description>An idle FastCGI application will be killed after FCGIDIdleTimeout</description>
    <syntax>FCGIDIdleTimeout <em>seconds</em></syntax>
    <default>FCGIDIdleTimeout 300</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>Application processes which have not handled a request
      for this period of time will be terminated.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDIPCCommTimeout</name>
    <description>Communication timeout to FastCGI server</description>
    <syntax>FCGIDIPCCommTimeout <em>seconds</em></syntax>
    <default>FCGIDIPCCommTimeout 40</default>
    <contextlist><context>server config</context> <context>virtual host</context></contextlist>
    <usage>
      <p>This is the maximum period of time the module will wait
      while trying to read from or write to a FastCGI application.</p>

      <note type="warning"><title>Warning</title>
      <p>The FastCGI application must begin generating the response within
      this period of time.  Increase this directive as necessary to handle
      applications which take a relatively long period of time to respond.</p>
      </note>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDIPCConnectTimeout</name>
    <description>Connect timeout to FastCGI server</description>
    <syntax>FCGIDIPCConnectTimeout <em>seconds</em></syntax>
    <default>FCGIDIPCConnectTimeout 3</default>
    <contextlist><context>server config</context> <context>virtual host</context></contextlist>
    <usage>
      <p>This is the maximum period of time the module will wait
      while trying to connect to a FastCGI application on Windows.
      (This directive is not respected on Unix, where AF_UNIX defaults
      will apply.)</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDMaxProcessCount</name>
    <description>maximum number of FastCGI application processes</description>
    <syntax>FCGIDMaxProcessCount <em>value</em></syntax>
    <default>FCGIDMaxProcessCount 1000</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>This directive sets the maximum number of FastCGI application
      processes which can be active at one time.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDMaxRequestInMem</name>
    <description>maximum size of a request which will be held in memory</description>
    <syntax>FCGIDMaxRequestInMem <em>bytes</em></syntax>
    <default>FCGIDMaxRequestInMem 65536</default>
    <contextlist><context>server config</context> <context>virtual host</context></contextlist>
    <usage>
      <p>This module reads the entire request body from the client
      before sending it to the application.  Normally the request body
      will be stored in memory.  Once the amount of request body read
      from the client exceeds <directive>FCGIDMaxRequestInMem</directive>
      bytes, the remainder of the request body will be stored in a 
      temporary file.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDMaxRequestLen</name>
    <description>maximum HTTP request length</description>
    <syntax>FCGIDMaxRequestLen <em>bytes</em></syntax>
    <default>FCGIDMaxRequestLen 1073741824</default>
    <contextlist><context>server config</context> <context>virtual host</context></contextlist>
    <usage>
      <p>If the size of the request body exceeds this amount, the
      request will fail with <code>500 Server Error</code>.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDMaxRequestsPerProcess</name>
    <description>Max requests handled by each FastCGI application</description>
    <syntax>FCGIDMaxRequestsPerProcess <em>value</em></syntax>
    <default>FCGIDMaxRequestsPerProcess -1</default>
    <contextlist><context>server config</context> <context>virtual host</context></contextlist>
    <usage>
      <p>FastCGI application processes will be terminated after handling
      the specified number of requests.  A value of <code>-1</code>
      disables the check.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDOutputBufferSize</name>
    <description>CGI output buffer size</description>
    <syntax>FCGIDOutputBufferSize <em>bytes</em></syntax>
    <default>FCGIDOutputBufferSize 65536</default>
    <contextlist><context>server config</context> <context>virtual host</context></contextlist>
    <usage>
      <p>This is the maximum amount of response data the module will read
      from the FastCGI application before flushing the data to the client.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDPassHeader</name>
    <description>Header name which will be passed to FastCGI as environment variable.</description>
    <syntax>FCGIDPassHeader <em>name</em></syntax>
    <default><em>none</em></default>
    <contextlist><context>server config</context> <context>virtual host</context></contextlist>
    <usage>
      <p>This directive specifies the name of a request header which
      will be passed to the FastCGI application as an environment
      variable.  The directive can be used multiple times.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDPHPFixPathinfoEnable</name>
    <description>Mirror the PHP <code>cgi.fix_pathinfo</code>
    setting</description>
    <syntax>FCGIDPHPFixPathinfoEnable 1</syntax>
    <default>FCGIDPHPFixPathinfoEnable 0</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>This directive enables special <code>SCRIPT_NAME</code> 
      processing which allows PHP to provide additional path information.
      The setting of <directive>FCGIDPHPFixPathinfoEnable</directive>
      should mirror the <code>cgi.fix_pathinfo</code> setting in 
      <code>php.ini</code>.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDProcessLifeTime</name>
    <description>maximum FastCGI application process lifetime</description>
    <syntax>FCGIDProcessLifeTime <em>seconds</em></syntax>
    <default>FCGIDProcessLifeTime 3600</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>Idle application processes which have existed for greater
      than this time will be terminated.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDSharememPath</name>
    <description>shared memory file path</description>
    <syntax>FCGIDSharememPath <em>pathname</em></syntax>
    <default>FCGIDSharememPath logs/fcgid_shm</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>This module uses shared memory on Unix to maintain state which
      is shared between httpd processes.  This directive specifies the
      name of the shared memory file.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDSocketPath</name>
    <description>directory for AF_UNIX sockets (Unix) or pipes (Windows)</description>
    <syntax>FCGIDSocketPath <em>pathname</em></syntax>
    <default>FCGIDSocketPath logs/fcgidsock</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>This module uses AF_UNIX sockets or named pipes, depending on the
      platform, to communicate with FastCGI applications.  This directive
      specifies the directory where those sockets or named pipes will be
      created.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDSpawnScore</name>
    <description>Each spawn adds this value to the process activity score.</description>
    <syntax>FCGIDSpawnScore <em>value</em></syntax>
    <default>FCGIDSpawnScore 1</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>Refer to the <directive module="mod_fcgid">FCGIDSpawnScoreUpLimit</directive>
      directive for more information.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDSpawnScoreUpLimit</name>
    <description>Maximum value of the process activity score which allows
    a spawn to occur</description>
    <syntax>FCGIDSpawnScoreUpLimit <em>value</em></syntax>
    <default>FCGIDSpawnScoreUpLimit 10</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>The module maintains a process activity score for each FastCGI
      application which represents process activity; it uses that score to 
      determine if more instances of the FastCGI application can be spawned
      (started).  If the current score is higher than the value of this 
      directive, a new instance of the FastCGI application cannot yet be 
      started.</p>

      <p>The <directive module="mod_fcgid">FCGIDSpawnScore</directive> directive 
      determines how much is added to the score for every spawned application
      process.  The <directive module="mod_fcgid">FCGIDTerminationScore</directive>
      directive determines how much is added to the score for every terminated
      application process.  The <directive module="mod_fcgid">FCGIDTimeScore</directive>
      directive determines how much is subtracted from the score every second.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDTerminationScore</name>
    <description>Each terminated process adds this value to the process activity
    score.</description>
    <syntax>FCGIDTerminationScore <em>value</em></syntax>
    <default>FCGIDTerminationScore 2</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>Refer to the <directive module="mod_fcgid">FCGIDSpawnScoreUpLimit</directive>
      directive for more information.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDTimeScore</name>
    <description>Amount subtracted from process activity score each 
    second</description>
    <syntax>FCGIDTimeScore <em>value</em></syntax>
    <default>FCGIDTimeScore 1</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>Refer to the <directive module="mod_fcgid">FCGIDSpawnScoreUpLimit</directive>
      directive for more information.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDWrapper</name>
    <description>The CGI wrapper setting</description>
    <syntax>FCGIDWrapper <em>command</em> [ <em>suffix</em> ] [ virtual ]</syntax>
    <default><em>none</em></default>
    <contextlist>
      <context>server config</context> <context>virtual host</context>
      <context>directory</context> <context>.htaccess</context>
    </contextlist>
    <override>FileInfo</override>
    <usage>
      <p>The given command is used to spawn FCGI server processes. If this directive
      is not used, the file pointed to by the request URL will be used instead.
      Options for the command can be included using quotation marks surrounding
      the command and options.</p>
      <p>The optional <code>suffix</code> argument restricts the use of this FCGI
      server to all URLs with the given exact path suffix. A suffix needs to start
      with '<code>.</code>'.</p>
      <p>The <code>virtual</code> flag signals that there will be no check
      whether the request URL actually points to an existing file. The only
      file which needs to exist is the wrapper itself.</p>
      <p>The directive can be used multiple times. A wrapper defined without a suffix
      is used as a default in case no suffix matches.</p>
    </usage>
  </directivesynopsis>

  <directivesynopsis>
    <name>FCGIDZombieScanInterval</name>
    <description>scan interval for zombie process</description>
    <syntax>FCGIDZombieScanInterval <em>seconds</em></syntax>
    <default>FCGIDZombieScanInterval 3</default>
    <contextlist><context>server config</context></contextlist>
    <usage>
      <p>The module checks for exited FastCGI applications at this interval.
      During this period of time, the application may exist in the process
      table as a zombie (on Unix).</p>
    </usage>
  </directivesynopsis>

</modulesynopsis>
